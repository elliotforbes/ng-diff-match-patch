{"version":3,"file":"diffMatchPatch.js","sourceRoot":"","sources":["../src/diffMatchPatch.ts"],"names":[],"mappings":"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","sourcesContent":["export const enum DiffOp {\r\n  Delete = -1,\r\n  Equal = 0,\r\n  Insert = 1\r\n}\r\n\r\nexport type Diff = [DiffOp, string];\r\n\r\n/**\r\n * Class containing the diff, match and patch methods.\r\n * @constructor\r\n */\r\nclass DiffMatchPatch {\r\n\r\n  constructor() {  }\r\n\r\n  // Defaults.\r\n  // Redefine these in your program to override the defaults.\r\n\r\n  // Number of seconds to map a diff before giving up (0 for infinity).\r\n  Diff_Timeout = 1.0;\r\n  // Cost of an empty edit operation in terms of edit characters.\r\n  Diff_EditCost = 4;\r\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\r\n  Match_Threshold = 0.5;\r\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\r\n  // A match this many characters away from the expected location will add\r\n  // 1.0 to the score (0.0 is a perfect match).\r\n  Match_Distance = 1000;\r\n  // When deleting a large block of text (over ~64 characters), how close do\r\n  // the contents have to be to match the expected contents. (0.0 = perfection,\r\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\r\n  // end points of a delete need to match.\r\n  Patch_DeleteThreshold = 0.5;\r\n  // Chunk size for context length.\r\n  Patch_Margin = 4;\r\n\r\n  // The number of bits in an int.\r\n  Match_MaxBits = 32;\r\n  /**\r\n   * The data structure representing a diff is an array of tuples:\r\n   * [[DiffOp.Delete, 'Hello'], [DiffOp.Insert, 'Goodbye'], [DiffOp.Equal, ' world.']]\r\n   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\r\n   */\r\n\r\n  // Define some regex patterns for matching boundaries.\r\n  whitespaceRegex_ = new RegExp('/\\s/');\r\n  linebreakRegex_ = new RegExp('/[\\r\\n]/');\r\n  blanklineEndRegex_ = new RegExp('/\\n\\r?\\n$/');\r\n  blanklineStartRegex_ = new RegExp('/^\\r?\\n\\r?\\n/');\r\n\r\n  /**\r\n   * Find the differences between two texts.  Simplifies the problem by stripping\r\n   * any common prefix or suffix off the texts before diffing.\r\n   * @param {string} text1 Old string to be diffed.\r\n   * @param {string} text2 New string to be diffed.\r\n   * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\r\n   *     then don't run a line-level diff first to identify the changed areas.\r\n   *     Defaults to true, which does a faster, slightly less optimal diff.\r\n   * @param {number} opt_deadline Optional time when the diff should be complete\r\n   *     by.  Used internally for recursive calls.  Users should set DiffTimeout\r\n   *     instead.\r\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n   */\r\n    diff_main (text1: string, text2: string, opt_checklines?: boolean, opt_deadline?: number): Array<Diff> {\r\n      // Set a deadline by which time the diff must be complete.\r\n      if (typeof opt_deadline == 'undefined') {\r\n        if (this.Diff_Timeout <= 0) {\r\n          opt_deadline = Number.MAX_VALUE;\r\n        } else {\r\n          opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\r\n        }\r\n      }\r\n      const deadline = opt_deadline;\r\n\r\n      // Check for null inputs.\r\n      if (text1 == null || text2 == null) {\r\n        throw new Error('Null input. (diff_main)');\r\n      }\r\n\r\n      // Check for equality (speedup).\r\n      if (text1 == text2) {\r\n        if (text1) {\r\n          return [[DiffOp.Equal, text1]];\r\n        }\r\n        return [];\r\n      }\r\n\r\n      if (typeof opt_checklines == 'undefined') {\r\n        opt_checklines = true;\r\n      }\r\n      const checklines = opt_checklines;\r\n\r\n      // Trim off common prefix (speedup).\r\n      let commonlength = this.diff_commonPrefix(text1, text2);\r\n      const commonprefix = text1.substring(0, commonlength);\r\n      text1 = text1.substring(commonlength);\r\n      text2 = text2.substring(commonlength);\r\n\r\n      // Trim off common suffix (speedup).\r\n      commonlength = this.diff_commonSuffix(text1, text2);\r\n      const commonsuffix = text1.substring(text1.length - commonlength);\r\n      text1 = text1.substring(0, text1.length - commonlength);\r\n      text2 = text2.substring(0, text2.length - commonlength);\r\n\r\n      // Compute the diff on the middle block.\r\n      const diffs = this.diff_compute_(text1, text2, checklines, deadline);\r\n\r\n      // Restore the prefix and suffix.\r\n      if (commonprefix) {\r\n        diffs.unshift([DiffOp.Equal, commonprefix]);\r\n      }\r\n      if (commonsuffix) {\r\n        diffs.push([DiffOp.Equal, commonsuffix]);\r\n      }\r\n      this.diff_cleanupMerge(diffs);\r\n      return diffs;\r\n  };\r\n\r\n\r\n  /**\r\n   * Find the differences between two texts.  Assumes that the texts do not\r\n   * have any common prefix or suffix.\r\n   * @param {string} text1 Old string to be diffed.\r\n   * @param {string} text2 New string to be diffed.\r\n   * @param {boolean} checklines Speedup flag.  If false, then don't run a\r\n   *     line-level diff first to identify the changed areas.\r\n   *     If true, then run a faster, slightly less optimal diff.\r\n   * @param {number} deadline Time when the diff should be complete by.\r\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n   * @private\r\n   */\r\n    diff_compute_ (text1: string, text2: string, checklines: boolean,\r\n      deadline: number): Array<Diff> {\r\n    let diffs: Array<Diff>;\r\n\r\n    if (!text1) {\r\n      // Just add some text (speedup).\r\n      return [[DiffOp.Insert, text2]];\r\n    }\r\n\r\n    if (!text2) {\r\n      // Just delete some text (speedup).\r\n      return [[DiffOp.Delete, text1]];\r\n    }\r\n\r\n    const longtext = text1.length > text2.length ? text1 : text2;\r\n    const shorttext = text1.length > text2.length ? text2 : text1;\r\n    const i = longtext.indexOf(shorttext);\r\n    if (i != -1) {\r\n      // Shorter text is inside the longer text (speedup).\r\n      diffs = [[DiffOp.Insert, longtext.substring(0, i)],\r\n              [DiffOp.Equal, shorttext],\r\n              [DiffOp.Insert, longtext.substring(i + shorttext.length)]];\r\n      // Swap insertions for deletions if diff is reversed.\r\n      if (text1.length > text2.length) {\r\n        diffs[0][0] = diffs[2][0] = DiffOp.Delete;\r\n      }\r\n      return diffs;\r\n    }\r\n\r\n    if (shorttext.length == 1) {\r\n      // Single character string.\r\n      // After the previous speedup, the character can't be an equality.\r\n      return [[DiffOp.Delete, text1], [DiffOp.Insert, text2]];\r\n    }\r\n\r\n    // Check to see if the problem can be split in two.\r\n    const hm = this.diff_halfMatch_(text1, text2);\r\n    if (hm) {\r\n      // A half-match was found, sort out the return data.\r\n      const text1_a = hm[0];\r\n      const text1_b = hm[1];\r\n      const text2_a = hm[2];\r\n      const text2_b = hm[3];\r\n      const mid_common = hm[4];\r\n      // Send both pairs off for separate processing.\r\n      const diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\r\n      const diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\r\n      // Merge the results.\r\n      return diffs_a.concat([[DiffOp.Equal, mid_common]], diffs_b);\r\n    }\r\n\r\n    if (checklines && text1.length > 100 && text2.length > 100) {\r\n      return this.diff_lineMode_(text1, text2, deadline);\r\n    }\r\n\r\n    return this.diff_bisect_(text1, text2, deadline);\r\n  };\r\n\r\n\r\n  /**\r\n   * Do a quick line-level diff on both strings, then rediff the parts for\r\n   * greater accuracy.\r\n   * This speedup can produce non-minimal diffs.\r\n   * @param {string} text1 Old string to be diffed.\r\n   * @param {string} text2 New string to be diffed.\r\n   * @param {number} deadline Time when the diff should be complete by.\r\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n   * @private\r\n   */\r\n    diff_lineMode_ (text1: string, text2: string, deadline: number) {\r\n    // Scan the text on a line-by-line basis first.\r\n    const a = this.diff_linesToChars_(text1, text2);\r\n    text1 = a.chars1;\r\n    text2 = a.chars2;\r\n    const linearray = a.lineArray;\r\n\r\n    const diffs = this.diff_main(text1, text2, false, deadline);\r\n\r\n    // Convert the diff back to original text.\r\n    this.diff_charsToLines_(diffs, linearray);\r\n    // Eliminate freak matches (e.g. blank lines)\r\n    this.diff_cleanupSemantic(diffs);\r\n\r\n    // Rediff any replacement blocks, this time character-by-character.\r\n    // Add a dummy entry at the end.\r\n    diffs.push([DiffOp.Equal, '']);\r\n    let pointer = 0;\r\n    let count_delete = 0;\r\n    let count_insert = 0;\r\n    let text_delete = '';\r\n    let text_insert = '';\r\n    while (pointer < diffs.length) {\r\n      switch (diffs[pointer][0]) {\r\n        case DiffOp.Insert:\r\n          count_insert++;\r\n          text_insert += diffs[pointer][1];\r\n          break;\r\n        case DiffOp.Delete:\r\n          count_delete++;\r\n          text_delete += diffs[pointer][1];\r\n          break;\r\n        case DiffOp.Equal:\r\n          // Upon reaching an equality, check for prior redundancies.\r\n          if (count_delete >= 1 && count_insert >= 1) {\r\n            // Delete the offending records and add the merged ones.\r\n            diffs.splice(pointer - count_delete - count_insert,\r\n                        count_delete + count_insert);\r\n            pointer = pointer - count_delete - count_insert;\r\n            const b = this.diff_main(text_delete, text_insert, false, deadline);\r\n            for (let j = b.length - 1; j >= 0; j--) {\r\n              diffs.splice(pointer, 0, b[j]);\r\n            }\r\n            pointer = pointer + b.length;\r\n          }\r\n          count_insert = 0;\r\n          count_delete = 0;\r\n          text_delete = '';\r\n          text_insert = '';\r\n          break;\r\n      }\r\n      pointer++;\r\n    }\r\n    diffs.pop();  // Remove the dummy entry at the end.\r\n\r\n    return diffs;\r\n  };\r\n\r\n\r\n  /**\r\n   * Find the 'middle snake' of a diff, split the problem in two\r\n   * and return the recursively constructed diff.\r\n   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its constiations.\r\n   * @param {string} text1 Old string to be diffed.\r\n   * @param {string} text2 New string to be diffed.\r\n   * @param {number} deadline Time at which to bail if not yet complete.\r\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n   * @private\r\n   */\r\n    diff_bisect_ (text1: string, text2: string, deadline: number): Array<Diff> {\r\n    // Cache the text lengths to prevent multiple calls.\r\n    const text1_length = text1.length;\r\n    const text2_length = text2.length;\r\n    const max_d = Math.ceil((text1_length + text2_length) / 2);\r\n    const v_offset = max_d;\r\n    const v_length = 2 * max_d;\r\n    const v1 = new Array(v_length);\r\n    const v2 = new Array(v_length);\r\n    // Setting all elements to -1 is faster in Chrome & Firefox than mixing\r\n    // integers and undefined.\r\n    for (let x = 0; x < v_length; x++) {\r\n      v1[x] = -1;\r\n      v2[x] = -1;\r\n    }\r\n    v1[v_offset + 1] = 0;\r\n    v2[v_offset + 1] = 0;\r\n    const delta = text1_length - text2_length;\r\n    // If the total number of characters is odd, then the front path will collide\r\n    // with the reverse path.\r\n    const front = (delta % 2 != 0);\r\n    // Offsets for start and end of k loop.\r\n    // Prevents mapping of space beyond the grid.\r\n    let k1start = 0;\r\n    let k1end = 0;\r\n    let k2start = 0;\r\n    let k2end = 0;\r\n    for (let d = 0; d < max_d; d++) {\r\n      // Bail out if deadline is reached.\r\n      if ((new Date()).getTime() > deadline) {\r\n        break;\r\n      }\r\n\r\n      // Walk the front path one step.\r\n      for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\r\n        const k1_offset = v_offset + k1;\r\n        let x1;\r\n        if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\r\n          x1 = v1[k1_offset + 1];\r\n        } else {\r\n          x1 = v1[k1_offset - 1] + 1;\r\n        }\r\n        let y1 = x1 - k1;\r\n        while (x1 < text1_length && y1 < text2_length &&\r\n              text1.charAt(x1) == text2.charAt(y1)) {\r\n          x1++;\r\n          y1++;\r\n        }\r\n        v1[k1_offset] = x1;\r\n        if (x1 > text1_length) {\r\n          // Ran off the right of the graph.\r\n          k1end += 2;\r\n        } else if (y1 > text2_length) {\r\n          // Ran off the bottom of the graph.\r\n          k1start += 2;\r\n        } else if (front) {\r\n          const k2_offset = v_offset + delta - k1;\r\n          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\r\n            // Mirror x2 onto top-left coordinate system.\r\n            const x2 = text1_length - v2[k2_offset];\r\n            if (x1 >= x2) {\r\n              // Overlap detected.\r\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Walk the reverse path one step.\r\n      for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\r\n        const k2_offset = v_offset + k2;\r\n        let x2: number;\r\n        if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\r\n          x2 = v2[k2_offset + 1];\r\n        } else {\r\n          x2 = v2[k2_offset - 1] + 1;\r\n        }\r\n        let y2 = x2 - k2;\r\n        while (x2 < text1_length && y2 < text2_length &&\r\n              text1.charAt(text1_length - x2 - 1) ==\r\n              text2.charAt(text2_length - y2 - 1)) {\r\n          x2++;\r\n          y2++;\r\n        }\r\n        v2[k2_offset] = x2;\r\n        if (x2 > text1_length) {\r\n          // Ran off the left of the graph.\r\n          k2end += 2;\r\n        } else if (y2 > text2_length) {\r\n          // Ran off the top of the graph.\r\n          k2start += 2;\r\n        } else if (!front) {\r\n          const k1_offset = v_offset + delta - k2;\r\n          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\r\n            const x1 = v1[k1_offset];\r\n            const y1 = v_offset + x1 - k1_offset;\r\n            // Mirror x2 onto top-left coordinate system.\r\n            x2 = text1_length - x2;\r\n            if (x1 >= x2) {\r\n              // Overlap detected.\r\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Diff took too long and hit the deadline or\r\n    // number of diffs equals number of characters, no commonality at all.\r\n    return [[DiffOp.Delete, text1], [DiffOp.Insert, text2]];\r\n  };\r\n\r\n\r\n  /**\r\n   * Given the location of the 'middle snake', split the diff in two parts\r\n   * and recurse.\r\n   * @param {string} text1 Old string to be diffed.\r\n   * @param {string} text2 New string to be diffed.\r\n   * @param {number} x Index of split point in text1.\r\n   * @param {number} y Index of split point in text2.\r\n   * @param {number} deadline Time at which to bail if not yet complete.\r\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n   * @private\r\n   */\r\n    diff_bisectSplit_ (text1: string, text2: string, x: number, y: number, deadline: number) {\r\n      const text1a = text1.substring(0, x);\r\n      const text2a = text2.substring(0, y);\r\n      const text1b = text1.substring(x);\r\n      const text2b = text2.substring(y);\r\n\r\n      // Compute both diffs serially.\r\n      const diffs = this.diff_main(text1a, text2a, false, deadline);\r\n      const diffsb = this.diff_main(text1b, text2b, false, deadline);\r\n\r\n      return diffs.concat(diffsb);\r\n    };\r\n\r\n\r\n  /**\r\n   * Split two texts into an array of strings.  Reduce the texts to a string of\r\n   * hashes where each Unicode character represents one line.\r\n   * @param {string} text1 First string.\r\n   * @param {string} text2 Second string.\r\n   * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\r\n   *     An object containing the encoded text1, the encoded text2 and\r\n   *     the array of unique strings.\r\n   *     The zeroth element of the array of unique strings is intentionally blank.\r\n   * @private\r\n   */\r\n    diff_linesToChars_ (text1: string, text2: string) {\r\n      const lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\r\n      const lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\r\n\r\n      // '\\x00' is a valid character, but constious debuggers don't like it.\r\n      // So we'll insert a junk entry to avoid generating a null character.\r\n      lineArray[0] = '';\r\n\r\n\r\n      const chars1 = this.diff_linesToCharsMunge_(text1, lineArray, lineHash);\r\n      const chars2 = this.diff_linesToCharsMunge_(text2, lineArray, lineHash);\r\n      return {chars1: chars1, chars2: chars2, lineArray: lineArray};\r\n   };\r\n\r\n  /**\r\n   * Split a text into an array of strings.  Reduce the texts to a string of\r\n   * hashes where each Unicode character represents one line.\r\n   * Modifies linearray and linehash through being a closure.\r\n   * @param {string} text String to encode.\r\n   * @return {string} Encoded string.\r\n   * @private\r\n   */\r\n  diff_linesToCharsMunge_(text: string, lineArray: Array<string>, lineHash: any): string {\r\n    let chars = '';\r\n    // Walk the text, pulling out a substring for each line.\r\n    // text.split('\\n') would would temporarily double our memory footprint.\r\n    // Modifying text would create many large strings to garbage collect.\r\n    let lineStart = 0;\r\n    let lineEnd = -1;\r\n    // Keeping our own length constiable is faster than looking it up.\r\n    let lineArrayLength = lineArray.length;\r\n    while (lineEnd < text.length - 1) {\r\n      lineEnd = text.indexOf('\\n', lineStart);\r\n      if (lineEnd == -1) {\r\n        lineEnd = text.length - 1;\r\n      }\r\n      const line = text.substring(lineStart, lineEnd + 1);\r\n      lineStart = lineEnd + 1;\r\n\r\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\r\n          (lineHash[line] !== undefined)) {\r\n        chars += String.fromCharCode(lineHash[line]);\r\n      } else {\r\n        chars += String.fromCharCode(lineArrayLength);\r\n        lineHash[line] = lineArrayLength;\r\n        lineArray[lineArrayLength++] = line;\r\n      }\r\n    }\r\n    return chars;\r\n  }\r\n\r\n  /**\r\n   * Rehydrate the text in a diff from a string of line hashes to real lines of\r\n   * text.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   * @param {!Array.<string>} lineArray Array of unique strings.\r\n   * @private\r\n   */\r\n    diff_charsToLines_ (diffs: Array<Diff>, lineArray: Array<string>): void {\r\n    for (let x = 0; x < diffs.length; x++) {\r\n      const chars = diffs[x][1];\r\n      const text = [];\r\n      for (let y = 0; y < chars.length; y++) {\r\n        text[y] = lineArray[chars.charCodeAt(y)];\r\n      }\r\n      diffs[x][1] = text.join('');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Determine the common prefix of two strings.\r\n   * @param {string} text1 First string.\r\n   * @param {string} text2 Second string.\r\n   * @return {number} The number of characters common to the start of each\r\n   *     string.\r\n   */\r\n    diff_commonPrefix (text1: string, text2: string): number {\r\n    // Quick check for common null cases.\r\n    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\r\n      return 0;\r\n    }\r\n    // Binary search.\r\n    // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n    let pointermin = 0;\r\n    let pointermax = Math.min(text1.length, text2.length);\r\n    let pointermid = pointermax;\r\n    let pointerstart = 0;\r\n    while (pointermin < pointermid) {\r\n      if (text1.substring(pointerstart, pointermid) ==\r\n          text2.substring(pointerstart, pointermid)) {\r\n        pointermin = pointermid;\r\n        pointerstart = pointermin;\r\n      } else {\r\n        pointermax = pointermid;\r\n      }\r\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n    }\r\n    return pointermid;\r\n  };\r\n\r\n\r\n  /**\r\n   * Determine the common suffix of two strings.\r\n   * @param {string} text1 First string.\r\n   * @param {string} text2 Second string.\r\n   * @return {number} The number of characters common to the end of each string.\r\n   */\r\n    diff_commonSuffix (text1: string, text2: string): number {\r\n    // Quick check for common null cases.\r\n    if (!text1 || !text2 ||\r\n        text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\r\n      return 0;\r\n    }\r\n    // Binary search.\r\n    // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n    let pointermin = 0;\r\n    let pointermax = Math.min(text1.length, text2.length);\r\n    let pointermid = pointermax;\r\n    let pointerend = 0;\r\n    while (pointermin < pointermid) {\r\n      if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\r\n          text2.substring(text2.length - pointermid, text2.length - pointerend)) {\r\n        pointermin = pointermid;\r\n        pointerend = pointermin;\r\n      } else {\r\n        pointermax = pointermid;\r\n      }\r\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n    }\r\n    return pointermid;\r\n  };\r\n\r\n\r\n  /**\r\n   * Determine if the suffix of one string is the prefix of another.\r\n   * @param {string} text1 First string.\r\n   * @param {string} text2 Second string.\r\n   * @return {number} The number of characters common to the end of the first\r\n   *     string and the start of the second string.\r\n   * @private\r\n   */\r\n    diff_commonOverlap_ (text1: string, text2: string): number {\r\n    // Cache the text lengths to prevent multiple calls.\r\n    const text1_length = text1.length;\r\n    const text2_length = text2.length;\r\n    // Eliminate the null case.\r\n    if (text1_length == 0 || text2_length == 0) {\r\n      return 0;\r\n    }\r\n    // Truncate the longer string.\r\n    if (text1_length > text2_length) {\r\n      text1 = text1.substring(text1_length - text2_length);\r\n    } else if (text1_length < text2_length) {\r\n      text2 = text2.substring(0, text1_length);\r\n    }\r\n    const text_length = Math.min(text1_length, text2_length);\r\n    // Quick check for the worst case.\r\n    if (text1 == text2) {\r\n      return text_length;\r\n    }\r\n\r\n    // Start by looking for a single character match\r\n    // and increase length until no match is found.\r\n    // Performance analysis: http://neil.fraser.name/news/2010/11/04/\r\n    let best = 0;\r\n    let length = 1;\r\n    while (true) {\r\n      const pattern = text1.substring(text_length - length);\r\n      const found = text2.indexOf(pattern);\r\n      if (found == -1) {\r\n        return best;\r\n      }\r\n      length += found;\r\n      if (found == 0 || text1.substring(text_length - length) ==\r\n          text2.substring(0, length)) {\r\n        best = length;\r\n        length++;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Do the two texts share a substring which is at least half the length of the\r\n   * longer text?\r\n   * This speedup can produce non-minimal diffs.\r\n   * @param {string} text1 First string.\r\n   * @param {string} text2 Second string.\r\n   * @return {Array.<string>} Five element Array, containing the prefix of\r\n   *     text1, the suffix of text1, the prefix of text2, the suffix of\r\n   *     text2 and the common middle.  Or null if there was no match.\r\n   * @private\r\n   */\r\n    diff_halfMatch_ (text1: string, text2: string) {\r\n    if (this.Diff_Timeout <= 0) {\r\n      // Don't risk returning a non-optimal diff if we have unlimited time.\r\n      return null;\r\n    }\r\n    const longtext = text1.length > text2.length ? text1 : text2;\r\n    const shorttext = text1.length > text2.length ? text2 : text1;\r\n    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\r\n      return null;  // Pointless.\r\n    }\r\n    const dmp = this;  // 'this' becomes 'window' in a closure.\r\n\r\n\r\n    // First check if the second quarter is the seed for a half-match.\r\n    const hm1 = this.diff_halfMatchI_(longtext, shorttext,\r\n                              Math.ceil(longtext.length / 4), dmp);\r\n    // Check again based on the third quarter.\r\n    const hm2 = this.diff_halfMatchI_(longtext, shorttext,\r\n                              Math.ceil(longtext.length / 2), dmp);\r\n    let hm;\r\n    if (!hm1 && !hm2) {\r\n      return null;\r\n    } else if (!hm2) {\r\n      hm = hm1;\r\n    } else if (!hm1) {\r\n      hm = hm2;\r\n    } else {\r\n      // Both matched.  Select the longest.\r\n      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\r\n    }\r\n\r\n    // A half-match was found, sort out the return data.\r\n    let text1_a, text1_b, text2_a, text2_b;\r\n    if (text1.length > text2.length) {\r\n      text1_a = hm[0];\r\n      text1_b = hm[1];\r\n      text2_a = hm[2];\r\n      text2_b = hm[3];\r\n    } else {\r\n      text2_a = hm[0];\r\n      text2_b = hm[1];\r\n      text1_a = hm[2];\r\n      text1_b = hm[3];\r\n    }\r\n    const mid_common = hm[4];\r\n    return [text1_a, text1_b, text2_a, text2_b, mid_common];\r\n  };\r\n\r\n  /**\r\n   * Does a substring of shorttext exist within longtext such that the substring\r\n   * is at least half the length of longtext?\r\n   * Closure, but does not reference any external constiables.\r\n   * @param {string} longtext Longer string.\r\n   * @param {string} shorttext Shorter string.\r\n   * @param {number} i Start index of quarter length substring within longtext.\r\n   * @return {Array.<string>} Five element Array, containing the prefix of\r\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\r\n   *     of shorttext and the common middle.  Or null if there was no match.\r\n   * @private\r\n   */\r\n  diff_halfMatchI_(longtext: string, shorttext: string, i: number, dmp: DiffMatchPatch): Array<string> {\r\n    // Start with a 1/4 length substring at position i as a seed.\r\n    const seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\r\n    let j = -1;\r\n    let best_common = '';\r\n    let best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\r\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\r\n      const prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\r\n                                              shorttext.substring(j));\r\n      const suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\r\n                                              shorttext.substring(0, j));\r\n      if (best_common.length < suffixLength + prefixLength) {\r\n        best_common = shorttext.substring(j - suffixLength, j) +\r\n            shorttext.substring(j, j + prefixLength);\r\n        best_longtext_a = longtext.substring(0, i - suffixLength);\r\n        best_longtext_b = longtext.substring(i + prefixLength);\r\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\r\n        best_shorttext_b = shorttext.substring(j + prefixLength);\r\n      }\r\n    }\r\n    if (best_common.length * 2 >= longtext.length) {\r\n      return [best_longtext_a, best_longtext_b,\r\n              best_shorttext_a, best_shorttext_b, best_common];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reduce the number of edits by eliminating semantically trivial equalities.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   */\r\n    diff_cleanupSemantic (diffs: Array<Diff>) {\r\n    let changes = false;\r\n    const equalities = [];  // Stack of indices where equalities are found.\r\n    let equalitiesLength = 0;  // Keeping our own length const is faster in JS.\r\n    /** @type {?string} */\r\n    let lastequality = null;\r\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\r\n    let pointer = 0;  // Index of current position.\r\n    // Number of characters that changed prior to the equality.\r\n    let length_insertions1 = 0;\r\n    let length_deletions1 = 0;\r\n    // Number of characters that changed after the equality.\r\n    let length_insertions2 = 0;\r\n    let length_deletions2 = 0;\r\n    while (pointer < diffs.length) {\r\n      if (diffs[pointer][0] == DiffOp.Equal) {  // Equality found.\r\n        equalities[equalitiesLength++] = pointer;\r\n        length_insertions1 = length_insertions2;\r\n        length_deletions1 = length_deletions2;\r\n        length_insertions2 = 0;\r\n        length_deletions2 = 0;\r\n        lastequality = diffs[pointer][1];\r\n      } else {  // An insertion or deletion.\r\n        if (diffs[pointer][0] == DiffOp.Insert) {\r\n          length_insertions2 += diffs[pointer][1].length;\r\n        } else {\r\n          length_deletions2 += diffs[pointer][1].length;\r\n        }\r\n        // Eliminate an equality that is smaller or equal to the edits on both\r\n        // sides of it.\r\n        if (lastequality && (lastequality.length <=\r\n            Math.max(length_insertions1, length_deletions1)) &&\r\n            (lastequality.length <= Math.max(length_insertions2,\r\n                                            length_deletions2))) {\r\n          // Duplicate record.\r\n          diffs.splice(equalities[equalitiesLength - 1], 0,\r\n                      [DiffOp.Delete, lastequality]);\r\n          // Change second copy to insert.\r\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DiffOp.Insert;\r\n          // Throw away the equality we just deleted.\r\n          equalitiesLength--;\r\n          // Throw away the previous equality (it needs to be reevaluated).\r\n          equalitiesLength--;\r\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\r\n          length_insertions1 = 0;  // Reset the counters.\r\n          length_deletions1 = 0;\r\n          length_insertions2 = 0;\r\n          length_deletions2 = 0;\r\n          lastequality = null;\r\n          changes = true;\r\n        }\r\n      }\r\n      pointer++;\r\n    }\r\n\r\n    // Normalize the diff.\r\n    if (changes) {\r\n      this.diff_cleanupMerge(diffs);\r\n    }\r\n    this.diff_cleanupSemanticLossless(diffs);\r\n\r\n    // Find any overlaps between deletions and insertions.\r\n    // e.g: <del>abcxxx</del><ins>xxxdef</ins>\r\n    //   -> <del>abc</del>xxx<ins>def</ins>\r\n    // e.g: <del>xxxabc</del><ins>defxxx</ins>\r\n    //   -> <ins>def</ins>xxx<del>abc</del>\r\n    // Only extract an overlap if it is as big as the edit ahead or behind it.\r\n    pointer = 1;\r\n    while (pointer < diffs.length) {\r\n      if (diffs[pointer - 1][0] == DiffOp.Delete &&\r\n          diffs[pointer][0] == DiffOp.Insert) {\r\n        const deletion = diffs[pointer - 1][1];\r\n        const insertion = diffs[pointer][1];\r\n        const overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\r\n        const overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\r\n        if (overlap_length1 >= overlap_length2) {\r\n          if (overlap_length1 >= deletion.length / 2 ||\r\n              overlap_length1 >= insertion.length / 2) {\r\n            // Overlap found.  Insert an equality and trim the surrounding edits.\r\n            diffs.splice(pointer, 0,\r\n                [DiffOp.Equal, insertion.substring(0, overlap_length1)]);\r\n            diffs[pointer - 1][1] =\r\n                deletion.substring(0, deletion.length - overlap_length1);\r\n            diffs[pointer + 1][1] = insertion.substring(overlap_length1);\r\n            pointer++;\r\n          }\r\n        } else {\r\n          if (overlap_length2 >= deletion.length / 2 ||\r\n              overlap_length2 >= insertion.length / 2) {\r\n            // Reverse overlap found.\r\n            // Insert an equality and swap and trim the surrounding edits.\r\n            diffs.splice(pointer, 0,\r\n                [DiffOp.Equal, deletion.substring(0, overlap_length2)]);\r\n            diffs[pointer - 1][0] = DiffOp.Insert;\r\n            diffs[pointer - 1][1] =\r\n                insertion.substring(0, insertion.length - overlap_length2);\r\n            diffs[pointer + 1][0] = DiffOp.Delete;\r\n            diffs[pointer + 1][1] =\r\n                deletion.substring(overlap_length2);\r\n            pointer++;\r\n          }\r\n        }\r\n        pointer++;\r\n      }\r\n      pointer++;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Look for single edits surrounded on both sides by equalities\r\n   * which can be shifted sideways to align the edit to a word boundary.\r\n   * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   */\r\n    diff_cleanupSemanticLossless (diffs: Array<Diff>) {\r\n    /**\r\n     * Given two strings, compute a score representing whether the internal\r\n     * boundary falls on logical boundaries.\r\n     * Scores range from 6 (best) to 0 (worst).\r\n     * Closure, but does not reference any external constiables.\r\n     * @param {string} one First string.\r\n     * @param {string} two Second string.\r\n     * @return {number} The score.\r\n     * @private\r\n     */\r\n    function diff_cleanupSemanticScore_(one: string, two: string): number {\r\n      if (!one || !two) {\r\n        // Edges are the best.\r\n        return 6;\r\n      }\r\n\r\n\r\n      const nonAlphaNumericRegex_ = new RegExp('/[^a-zA-Z0-9]/');\r\n\r\n      // Each port of this function behaves slightly differently due to\r\n      // subtle differences in each language's definition of things like\r\n      // 'whitespace'.  Since this function's purpose is largely cosmetic,\r\n      // the choice has been made to use each language's native features\r\n      // rather than force total conformity.\r\n      const char1 = one.charAt(one.length - 1);\r\n      const char2 = two.charAt(0);\r\n      const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);\r\n      const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);\r\n      const whitespace1 = nonAlphaNumeric1 &&\r\n          char1.match(this.whitespaceRegex_);\r\n      const whitespace2 = nonAlphaNumeric2 &&\r\n          char2.match(this.whitespaceRegex_);\r\n      const lineBreak1 = whitespace1 &&\r\n          char1.match(this.linebreakRegex_);\r\n      const lineBreak2 = whitespace2 &&\r\n          char2.match(this.linebreakRegex_);\r\n      const blankLine1 = lineBreak1 &&\r\n          one.match(this.blanklineEndRegex_);\r\n      const blankLine2 = lineBreak2 &&\r\n          two.match(this.blanklineStartRegex_);\r\n\r\n      if (blankLine1 || blankLine2) {\r\n        // Five points for blank lines.\r\n        return 5;\r\n      } else if (lineBreak1 || lineBreak2) {\r\n        // Four points for line breaks.\r\n        return 4;\r\n      } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\r\n        // Three points for end of sentences.\r\n        return 3;\r\n      } else if (whitespace1 || whitespace2) {\r\n        // Two points for whitespace.\r\n        return 2;\r\n      } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\r\n        // One point for non-alphanumeric.\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    let pointer = 1;\r\n    // Intentionally ignore the first and last element (don't need checking).\r\n    while (pointer < diffs.length - 1) {\r\n      if (diffs[pointer - 1][0] == DiffOp.Equal &&\r\n          diffs[pointer + 1][0] == DiffOp.Equal) {\r\n        // This is a single edit surrounded by equalities.\r\n        let equality1 = diffs[pointer - 1][1];\r\n        let edit = diffs[pointer][1];\r\n        let equality2 = diffs[pointer + 1][1];\r\n\r\n        // First, shift the edit as far left as possible.\r\n        const commonOffset = this.diff_commonSuffix(equality1, edit);\r\n        if (commonOffset) {\r\n          const commonString = edit.substring(edit.length - commonOffset);\r\n          equality1 = equality1.substring(0, equality1.length - commonOffset);\r\n          edit = commonString + edit.substring(0, edit.length - commonOffset);\r\n          equality2 = commonString + equality2;\r\n        }\r\n\r\n        // Second, step character by character right, looking for the best fit.\r\n        let bestEquality1 = equality1;\r\n        let bestEdit = edit;\r\n        let bestEquality2 = equality2;\r\n        let bestScore = diff_cleanupSemanticScore_(equality1, edit) +\r\n            diff_cleanupSemanticScore_(edit, equality2);\r\n        while (edit.charAt(0) === equality2.charAt(0)) {\r\n          equality1 += edit.charAt(0);\r\n          edit = edit.substring(1) + equality2.charAt(0);\r\n          equality2 = equality2.substring(1);\r\n          const score = diff_cleanupSemanticScore_(equality1, edit) +\r\n              diff_cleanupSemanticScore_(edit, equality2);\r\n          // The >= encourages trailing rather than leading whitespace on edits.\r\n          if (score >= bestScore) {\r\n            bestScore = score;\r\n            bestEquality1 = equality1;\r\n            bestEdit = edit;\r\n            bestEquality2 = equality2;\r\n          }\r\n        }\r\n\r\n        if (diffs[pointer - 1][1] != bestEquality1) {\r\n          // We have an improvement, save it back to the diff.\r\n          if (bestEquality1) {\r\n            diffs[pointer - 1][1] = bestEquality1;\r\n          } else {\r\n            diffs.splice(pointer - 1, 1);\r\n            pointer--;\r\n          }\r\n          diffs[pointer][1] = bestEdit;\r\n          if (bestEquality2) {\r\n            diffs[pointer + 1][1] = bestEquality2;\r\n          } else {\r\n            diffs.splice(pointer + 1, 1);\r\n            pointer--;\r\n          }\r\n        }\r\n      }\r\n      pointer++;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Reduce the number of edits by eliminating operationally trivial equalities.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   */\r\n    diff_cleanupEfficiency (diffs: Array<Diff>) {\r\n    let changes = false;\r\n    const equalities = [];  // Stack of indices where equalities are found.\r\n    let equalitiesLength = 0;  // Keeping our own length const is faster in JS.\r\n    /** @type {?string} */\r\n    let lastequality = null;\r\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\r\n    let pointer = 0;  // Index of current position.\r\n    // Is there an insertion operation before the last equality.\r\n    let pre_ins = false;\r\n    // Is there a deletion operation before the last equality.\r\n    let pre_del = false;\r\n    // Is there an insertion operation after the last equality.\r\n    let post_ins = false;\r\n    // Is there a deletion operation after the last equality.\r\n    let post_del = false;\r\n    while (pointer < diffs.length) {\r\n      if (diffs[pointer][0] == DiffOp.Equal) {  // Equality found.\r\n        if (diffs[pointer][1].length < this.Diff_EditCost &&\r\n            (post_ins || post_del)) {\r\n          // Candidate found.\r\n          equalities[equalitiesLength++] = pointer;\r\n          pre_ins = post_ins;\r\n          pre_del = post_del;\r\n          lastequality = diffs[pointer][1];\r\n        } else {\r\n          // Not a candidate, and can never become one.\r\n          equalitiesLength = 0;\r\n          lastequality = null;\r\n        }\r\n        post_ins = post_del = false;\r\n      } else {  // An insertion or deletion.\r\n        if (diffs[pointer][0] == DiffOp.Delete) {\r\n          post_del = true;\r\n        } else {\r\n          post_ins = true;\r\n        }\r\n        /*\r\n        * Five types to be split:\r\n        * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\r\n        * <ins>A</ins>X<ins>C</ins><del>D</del>\r\n        * <ins>A</ins><del>B</del>X<ins>C</ins>\r\n        * <ins>A</del>X<ins>C</ins><del>D</del>\r\n        * <ins>A</ins><del>B</del>X<del>C</del>\r\n        */\r\n        if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\r\n                            ((lastequality.length < this.Diff_EditCost / 2) &&\r\n                            ((pre_ins?1:0) + (pre_del?1:0) + (post_ins?1:0) + (post_del?1:0) == 3)))) {\r\n          // Duplicate record.\r\n          diffs.splice(equalities[equalitiesLength - 1], 0,\r\n                      [DiffOp.Delete, lastequality]);\r\n          // Change second copy to insert.\r\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DiffOp.Insert;\r\n          equalitiesLength--;  // Throw away the equality we just deleted;\r\n          lastequality = null;\r\n          if (pre_ins && pre_del) {\r\n            // No changes made which could affect previous entry, keep going.\r\n            post_ins = post_del = true;\r\n            equalitiesLength = 0;\r\n          } else {\r\n            equalitiesLength--;  // Throw away the previous equality.\r\n            pointer = equalitiesLength > 0 ?\r\n                equalities[equalitiesLength - 1] : -1;\r\n            post_ins = post_del = false;\r\n          }\r\n          changes = true;\r\n        }\r\n      }\r\n      pointer++;\r\n    }\r\n\r\n    if (changes) {\r\n      this.diff_cleanupMerge(diffs);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Reorder and merge like edit sections.  Merge equalities.\r\n   * Any edit section can move as long as it doesn't cross an equality.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   */\r\n    diff_cleanupMerge (diffs: Array<Diff>) {\r\n    diffs.push([DiffOp.Equal, '']);  // Add a dummy entry at the end.\r\n    let pointer = 0;\r\n    let count_delete = 0;\r\n    let count_insert = 0;\r\n    let text_delete = '';\r\n    let text_insert = '';\r\n    let commonlength;\r\n    while (pointer < diffs.length) {\r\n      switch (diffs[pointer][0]) {\r\n        case DiffOp.Insert:\r\n          count_insert++;\r\n          text_insert += diffs[pointer][1];\r\n          pointer++;\r\n          break;\r\n        case DiffOp.Delete:\r\n          count_delete++;\r\n          text_delete += diffs[pointer][1];\r\n          pointer++;\r\n          break;\r\n        case DiffOp.Equal:\r\n          // Upon reaching an equality, check for prior redundancies.\r\n          if (count_delete + count_insert > 1) {\r\n            if (count_delete !== 0 && count_insert !== 0) {\r\n              // Factor out any common prefixies.\r\n              commonlength = this.diff_commonPrefix(text_insert, text_delete);\r\n              if (commonlength !== 0) {\r\n                if ((pointer - count_delete - count_insert) > 0 &&\r\n                    diffs[pointer - count_delete - count_insert - 1][0] ==\r\n                    DiffOp.Equal) {\r\n                  diffs[pointer - count_delete - count_insert - 1][1] +=\r\n                      text_insert.substring(0, commonlength);\r\n                } else {\r\n                  diffs.splice(0, 0, [DiffOp.Equal,\r\n                                      text_insert.substring(0, commonlength)]);\r\n                  pointer++;\r\n                }\r\n                text_insert = text_insert.substring(commonlength);\r\n                text_delete = text_delete.substring(commonlength);\r\n              }\r\n              // Factor out any common suffixies.\r\n              commonlength = this.diff_commonSuffix(text_insert, text_delete);\r\n              if (commonlength !== 0) {\r\n                diffs[pointer][1] = text_insert.substring(text_insert.length -\r\n                    commonlength) + diffs[pointer][1];\r\n                text_insert = text_insert.substring(0, text_insert.length -\r\n                    commonlength);\r\n                text_delete = text_delete.substring(0, text_delete.length -\r\n                    commonlength);\r\n              }\r\n            }\r\n            // Delete the offending records and add the merged ones.\r\n            if (count_delete === 0) {\r\n              diffs.splice(pointer - count_insert,\r\n                  count_delete + count_insert, [DiffOp.Insert, text_insert]);\r\n            } else if (count_insert === 0) {\r\n              diffs.splice(pointer - count_delete,\r\n                  count_delete + count_insert, [DiffOp.Delete, text_delete]);\r\n            } else {\r\n              diffs.splice(pointer - count_delete - count_insert,\r\n                  count_delete + count_insert, [DiffOp.Delete, text_delete],\r\n                  [DiffOp.Insert, text_insert]);\r\n            }\r\n            pointer = pointer - count_delete - count_insert +\r\n                      (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\r\n          } else if (pointer !== 0 && diffs[pointer - 1][0] == DiffOp.Equal) {\r\n            // Merge this equality with the previous one.\r\n            diffs[pointer - 1][1] += diffs[pointer][1];\r\n            diffs.splice(pointer, 1);\r\n          } else {\r\n            pointer++;\r\n          }\r\n          count_insert = 0;\r\n          count_delete = 0;\r\n          text_delete = '';\r\n          text_insert = '';\r\n          break;\r\n      }\r\n    }\r\n    if (diffs[diffs.length - 1][1] === '') {\r\n      diffs.pop();  // Remove the dummy entry at the end.\r\n    }\r\n\r\n    // Second pass: look for single edits surrounded on both sides by equalities\r\n    // which can be shifted sideways to eliminate an equality.\r\n    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\r\n    let changes = false;\r\n    pointer = 1;\r\n    // Intentionally ignore the first and last element (don't need checking).\r\n    while (pointer < diffs.length - 1) {\r\n      if (diffs[pointer - 1][0] == DiffOp.Equal &&\r\n          diffs[pointer + 1][0] == DiffOp.Equal) {\r\n        // This is a single edit surrounded by equalities.\r\n        if (diffs[pointer][1].substring(diffs[pointer][1].length -\r\n            diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\r\n          // Shift the edit over the previous equality.\r\n          diffs[pointer][1] = diffs[pointer - 1][1] +\r\n              diffs[pointer][1].substring(0, diffs[pointer][1].length -\r\n                                          diffs[pointer - 1][1].length);\r\n          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\r\n          diffs.splice(pointer - 1, 1);\r\n          changes = true;\r\n        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\r\n            diffs[pointer + 1][1]) {\r\n          // Shift the edit over the next equality.\r\n          diffs[pointer - 1][1] += diffs[pointer + 1][1];\r\n          diffs[pointer][1] =\r\n              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\r\n              diffs[pointer + 1][1];\r\n          diffs.splice(pointer + 1, 1);\r\n          changes = true;\r\n        }\r\n      }\r\n      pointer++;\r\n    }\r\n    // If shifts were made, the diff needs reordering and another shift sweep.\r\n    if (changes) {\r\n      this.diff_cleanupMerge(diffs);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * loc is a location in text1, compute and return the equivalent location in\r\n   * text2.\r\n   * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   * @param {number} loc Location within text1.\r\n   * @return {number} Location within text2.\r\n   */\r\n    diff_xIndex (diffs: Array<Diff>, loc: number): number {\r\n    let chars1 = 0;\r\n    let chars2 = 0;\r\n    let last_chars1 = 0;\r\n    let last_chars2 = 0;\r\n    let x;\r\n    for (x = 0; x < diffs.length; x++) {\r\n      if (diffs[x][0] !== DiffOp.Insert) {  // Equality or deletion.\r\n        chars1 += diffs[x][1].length;\r\n      }\r\n      if (diffs[x][0] !== DiffOp.Delete) {  // Equality or insertion.\r\n        chars2 += diffs[x][1].length;\r\n      }\r\n      if (chars1 > loc) {  // Overshot the location.\r\n        break;\r\n      }\r\n      last_chars1 = chars1;\r\n      last_chars2 = chars2;\r\n    }\r\n    // Was the location was deleted?\r\n    if (diffs.length != x && diffs[x][0] === DiffOp.Delete) {\r\n      return last_chars2;\r\n    }\r\n    // Add the remaining character length.\r\n    return last_chars2 + (loc - last_chars1);\r\n  };\r\n\r\n\r\n  /**\r\n   * Convert a diff array into a pretty HTML report.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   * @return {string} HTML representation.\r\n   */\r\n    diff_prettyHtml = function(diffs: Array<Diff>): string {\r\n    const html = [];\r\n    const pattern_amp = /&/g;\r\n    const pattern_lt = /</g;\r\n    const pattern_gt = />/g;\r\n    const pattern_para = /\\n/g;\r\n    for (let x = 0; x < diffs.length; x++) {\r\n      const op = diffs[x][0];    // Operation (insert, delete, equal)\r\n      const data = diffs[x][1];  // Text of change.\r\n      const text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\r\n          .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\r\n      switch (op) {\r\n        case DiffOp.Insert:\r\n          html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\r\n          break;\r\n        case DiffOp.Delete:\r\n          html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\r\n          break;\r\n        case DiffOp.Equal:\r\n          html[x] = '<span>' + text + '</span>';\r\n          break;\r\n      }\r\n    }\r\n    return html.join('');\r\n  };\r\n\r\n\r\n  /**\r\n   * Compute and return the source text (all equalities and deletions).\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   * @return {string} Source text.\r\n   */\r\n    diff_text1 (diffs: Array<Diff>): string {\r\n    const text = [];\r\n    for (let x = 0; x < diffs.length; x++) {\r\n      if (diffs[x][0] !== DiffOp.Insert) {\r\n        text[x] = diffs[x][1];\r\n      }\r\n    }\r\n    return text.join('');\r\n  };\r\n\r\n\r\n  /**\r\n   * Compute and return the destination text (all equalities and insertions).\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   * @return {string} Destination text.\r\n   */\r\n    diff_text2 (diffs: Array<Diff>): string {\r\n    const text = [];\r\n    for (let x = 0; x < diffs.length; x++) {\r\n      if (diffs[x][0] !== DiffOp.Delete) {\r\n        text[x] = diffs[x][1];\r\n      }\r\n    }\r\n    return text.join('');\r\n  };\r\n\r\n\r\n  /**\r\n   * Compute the Levenshtein distance; the number of inserted, deleted or\r\n   * substituted characters.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   * @return {number} Number of changes.\r\n   */\r\n    diff_levenshtein (diffs: Array<Diff>): number {\r\n    let levenshtein = 0;\r\n    let insertions = 0;\r\n    let deletions = 0;\r\n    for (let x = 0; x < diffs.length; x++) {\r\n      const op = diffs[x][0];\r\n      const data = diffs[x][1];\r\n      switch (op) {\r\n        case DiffOp.Insert:\r\n          insertions += data.length;\r\n          break;\r\n        case DiffOp.Delete:\r\n          deletions += data.length;\r\n          break;\r\n        case DiffOp.Equal:\r\n          // A deletion and an insertion is one substitution.\r\n          levenshtein += Math.max(insertions, deletions);\r\n          insertions = 0;\r\n          deletions = 0;\r\n          break;\r\n      }\r\n    }\r\n    levenshtein += Math.max(insertions, deletions);\r\n    return levenshtein;\r\n  };\r\n\r\n\r\n  /**\r\n   * Crush the diff into an encoded string which describes the operations\r\n   * required to transform text1 into text2.\r\n   * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\r\n   * Operations are tab-separated.  Inserted text is escaped using %xx notation.\r\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n   * @return {string} Delta text.\r\n   */\r\n    diff_toDelta (diffs: Array<Diff>): string {\r\n    const text = [];\r\n    for (let x = 0; x < diffs.length; x++) {\r\n      switch (diffs[x][0]) {\r\n        case DiffOp.Insert:\r\n          text[x] = '+' + encodeURI(diffs[x][1]);\r\n          break;\r\n        case DiffOp.Delete:\r\n          text[x] = '-' + diffs[x][1].length;\r\n          break;\r\n        case DiffOp.Equal:\r\n          text[x] = '=' + diffs[x][1].length;\r\n          break;\r\n      }\r\n    }\r\n    return text.join('\\t').replace(/%20/g, ' ');\r\n  };\r\n\r\n\r\n  /**\r\n   * Given the original text1, and an encoded string which describes the\r\n   * operations required to transform text1 into text2, compute the full diff.\r\n   * @param {string} text1 Source string for the diff.\r\n   * @param {string} delta Delta text.\r\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n   * @throws {!Error} If invalid input.\r\n   */\r\n    diff_fromDelta (text1: string, delta: string) {\r\n    const diffs = [];\r\n    let diffsLength = 0;  // Keeping our own length const is faster in JS.\r\n    let pointer = 0;  // Cursor in text1\r\n    const tokens = delta.split(/\\t/g);\r\n    for (let x = 0; x < tokens.length; x++) {\r\n      // Each token begins with a one character parameter which specifies the\r\n      // operation of this token (delete, insert, equality).\r\n      const param = tokens[x].substring(1);\r\n      switch (tokens[x].charAt(0)) {\r\n        case '+':\r\n          try {\r\n            diffs[diffsLength++] = [DiffOp.Insert, decodeURI(param)];\r\n          } catch (ex) {\r\n            // Malformed URI sequence.\r\n            throw new Error('Illegal escape in diff_fromDelta: ' + param);\r\n          }\r\n          break;\r\n        case '-':\r\n          // Fall through.\r\n        case '=':\r\n          const n = parseInt(param, 10);\r\n          if (isNaN(n) || n < 0) {\r\n            throw new Error('Invalid number in diff_fromDelta: ' + param);\r\n          }\r\n          const text = text1.substring(pointer, pointer += n);\r\n          if (tokens[x].charAt(0) == '=') {\r\n            diffs[diffsLength++] = [DiffOp.Equal, text];\r\n          } else {\r\n            diffs[diffsLength++] = [DiffOp.Delete, text];\r\n          }\r\n          break;\r\n        default:\r\n          // Blank tokens are ok (from a trailing \\t).\r\n          // Anything else is an error.\r\n          if (tokens[x]) {\r\n            throw new Error('Invalid diff operation in diff_fromDelta: ' +\r\n                            tokens[x]);\r\n          }\r\n      }\r\n    }\r\n    if (pointer != text1.length) {\r\n      throw new Error('Delta length (' + pointer +\r\n          ') does not equal source text length (' + text1.length + ').');\r\n    }\r\n    return diffs;\r\n  };\r\n\r\n  /**\r\n   * Locate the best instance of 'pattern' in 'text' near 'loc'.\r\n   * @param {string} text The text to search.\r\n   * @param {string} pattern The pattern to search for.\r\n   * @param {number} loc The location to search around.\r\n   * @return {number} Best match index or -1.\r\n   */\r\n    match_main (text: string, pattern: string, loc: number): number {\r\n    // Check for null inputs.\r\n    if (text == null || pattern == null || loc == null) {\r\n      throw new Error('Null input. (match_main)');\r\n    }\r\n\r\n    loc = Math.max(0, Math.min(loc, text.length));\r\n    if (text == pattern) {\r\n      // Shortcut (potentially not guaranteed by the algorithm)\r\n      return 0;\r\n    } else if (!text.length) {\r\n      // Nothing to match.\r\n      return -1;\r\n    } else if (text.substring(loc, loc + pattern.length) == pattern) {\r\n      // Perfect match at the perfect spot!  (Includes case of null pattern)\r\n      return loc;\r\n    } else {\r\n      // Do a fuzzy compare.\r\n      return this.match_bitap_(text, pattern, loc);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Locate the best instance of 'pattern' in 'text' near 'loc' using the\r\n   * Bitap algorithm.\r\n   * @param {string} text The text to search.\r\n   * @param {string} pattern The pattern to search for.\r\n   * @param {number} loc The location to search around.\r\n   * @return {number} Best match index or -1.\r\n   * @private\r\n   */\r\n    match_bitap_ (text: string, pattern: string, loc: number): number {\r\n    if (pattern.length > this.Match_MaxBits) {\r\n      throw new Error('Pattern too long for this browser.');\r\n    }\r\n\r\n    // Initialise the alphabet.\r\n    const s = this.match_alphabet_(pattern);\r\n\r\n    const dmp = this;  // 'this' becomes 'window' in a closure.\r\n\r\n    /**\r\n     * Compute and return the score for a match with e errors and x location.\r\n     * Accesses loc and pattern through being a closure.\r\n     * @param {number} e Number of errors in match.\r\n     * @param {number} x Location of match.\r\n     * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\r\n     * @private\r\n     */\r\n    function match_bitapScore_(e: number, x: number): number {\r\n      const accuracy = e / pattern.length;\r\n      const proximity = Math.abs(loc - x);\r\n      if (!dmp.Match_Distance) {\r\n        // Dodge divide by zero error.\r\n        return proximity ? 1.0 : accuracy;\r\n      }\r\n      return accuracy + (proximity / dmp.Match_Distance);\r\n    }\r\n\r\n    // Highest score beyond which we give up.\r\n    let score_threshold = this.Match_Threshold;\r\n    // Is there a nearby exact match? (speedup)\r\n    let best_loc = text.indexOf(pattern, loc);\r\n    if (best_loc != -1) {\r\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\r\n      // What about in the other direction? (speedup)\r\n      best_loc = text.lastIndexOf(pattern, loc + pattern.length);\r\n      if (best_loc != -1) {\r\n        score_threshold =\r\n            Math.min(match_bitapScore_(0, best_loc), score_threshold);\r\n      }\r\n    }\r\n\r\n    // Initialise the bit arrays.\r\n    const matchmask = 1 << (pattern.length - 1);\r\n    best_loc = -1;\r\n\r\n    let bin_min, bin_mid;\r\n    let bin_max = pattern.length + text.length;\r\n    let last_rd;\r\n    for (let d = 0; d < pattern.length; d++) {\r\n      // Scan for the best match; each iteration allows for one more error.\r\n      // Run a binary search to determine how far from 'loc' we can stray at this\r\n      // error level.\r\n      bin_min = 0;\r\n      bin_mid = bin_max;\r\n      while (bin_min < bin_mid) {\r\n        if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\r\n          bin_min = bin_mid;\r\n        } else {\r\n          bin_max = bin_mid;\r\n        }\r\n        bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\r\n      }\r\n      // Use the result from this iteration as the maximum for the next.\r\n      bin_max = bin_mid;\r\n      let start = Math.max(1, loc - bin_mid + 1);\r\n      const finish = Math.min(loc + bin_mid, text.length) + pattern.length;\r\n\r\n      const rd = Array(finish + 2);\r\n      rd[finish + 1] = (1 << d) - 1;\r\n      for (let j = finish; j >= start; j--) {\r\n        // The alphabet (s) is a sparse hash, so the following line generates\r\n        // warnings.\r\n        const charMatch = s[text.charAt(j - 1)];\r\n        if (d === 0) {  // First pass: exact match.\r\n          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n        } else {  // Subsequent passes: fuzzy match.\r\n          rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\r\n                  (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\r\n                  last_rd[j + 1];\r\n        }\r\n        if (rd[j] & matchmask) {\r\n          const score = match_bitapScore_(d, j - 1);\r\n          // This match will almost certainly be better than any existing match.\r\n          // But check anyway.\r\n          if (score <= score_threshold) {\r\n            // Told you so.\r\n            score_threshold = score;\r\n            best_loc = j - 1;\r\n            if (best_loc > loc) {\r\n              // When passing loc, don't exceed our current distance from loc.\r\n              start = Math.max(1, 2 * loc - best_loc);\r\n            } else {\r\n              // Already passed loc, downhill from here on in.\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // No hope for a (better) match at greater error levels.\r\n      if (match_bitapScore_(d + 1, loc) > score_threshold) {\r\n        break;\r\n      }\r\n      last_rd = rd;\r\n    }\r\n    return best_loc;\r\n  };\r\n\r\n\r\n  /**\r\n   * Initialise the alphabet for the Bitap algorithm.\r\n   * @param {string} pattern The text to encode.\r\n   * @return {!Object} Hash of character locations.\r\n   * @private\r\n   */\r\n    match_alphabet_ (pattern: string): { [character: string]: number } {\r\n    const s: { [character: string]: number } = {};\r\n    for (let i = 0; i < pattern.length; i++) {\r\n      s[pattern.charAt(i)] = 0;\r\n    }\r\n    for (let i = 0; i < pattern.length; i++) {\r\n      s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\r\n    }\r\n    return s;\r\n  };\r\n\r\n\r\n  /**\r\n   * Increase the context until it is unique,\r\n   * but don't let the pattern expand beyond Match_MaxBits.\r\n   * @param {!diff_match_patch.patch_obj} patch The patch to grow.\r\n   * @param {string} text Source text.\r\n   * @private\r\n   */\r\n    patch_addContext_ (patch: patch_obj, text: string) {\r\n    if (text.length == 0) {\r\n      return;\r\n    }\r\n    let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\r\n    let padding = 0;\r\n\r\n    // Look for the first and last matches of pattern in text.  If two different\r\n    // matches are found, increase the pattern length.\r\n    while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\r\n          pattern.length < this.Match_MaxBits - this.Patch_Margin -\r\n          this.Patch_Margin) {\r\n      padding += this.Patch_Margin;\r\n      pattern = text.substring(patch.start2 - padding,\r\n                              patch.start2 + patch.length1 + padding);\r\n    }\r\n    // Add one chunk for good luck.\r\n    padding += this.Patch_Margin;\r\n\r\n    // Add the prefix.\r\n    const prefix = text.substring(patch.start2 - padding, patch.start2);\r\n    if (prefix) {\r\n      patch.diffs.unshift([DiffOp.Equal, prefix]);\r\n    }\r\n    // Add the suffix.\r\n    const suffix = text.substring(patch.start2 + patch.length1,\r\n                                patch.start2 + patch.length1 + padding);\r\n    if (suffix) {\r\n      patch.diffs.push([DiffOp.Equal, suffix]);\r\n    }\r\n\r\n    // Roll back the start points.\r\n    patch.start1 -= prefix.length;\r\n    patch.start2 -= prefix.length;\r\n    // Extend the lengths.\r\n    patch.length1 += prefix.length + suffix.length;\r\n    patch.length2 += prefix.length + suffix.length;\r\n  };\r\n\r\n\r\n  /**\r\n   * Compute a list of patches to turn text1 into text2.\r\n   * Use diffs if provided, otherwise compute it ourselves.\r\n   * There are four ways to call this function, depending on what data is\r\n   * available to the caller:\r\n   * Method 1:\r\n   * a = text1, b = text2\r\n   * Method 2:\r\n   * a = diffs\r\n   * Method 3 (optimal):\r\n   * a = text1, b = diffs\r\n   * Method 4 (deprecated, use method 3):\r\n   * a = text1, b = text2, c = diffs\r\n   *\r\n   * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\r\n   * Array of diff tuples for text1 to text2 (method 2).\r\n   * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\r\n   * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\r\n   * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\r\n   * for text1 to text2 (method 4) or undefined (methods 1,2,3).\r\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n   */\r\n    patch_make (a: string | Array<Diff>, opt_b: string | Array<Diff>, opt_c: string | Array<Diff>) {\r\n    let text1, diffs;\r\n    if (typeof a == 'string' && typeof opt_b == 'string' &&\r\n        typeof opt_c == 'undefined') {\r\n      // Method 1: text1, text2\r\n      // Compute diffs from text1 and text2.\r\n      text1 = /** @type {string} */(a);\r\n      diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\r\n      if (diffs.length > 2) {\r\n        this.diff_cleanupSemantic(diffs);\r\n        this.diff_cleanupEfficiency(diffs);\r\n      }\r\n    } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\r\n        typeof opt_c == 'undefined') {\r\n      // Method 2: diffs\r\n      // Compute text1 from diffs.\r\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\r\n      text1 = this.diff_text1(diffs);\r\n    } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\r\n        typeof opt_c == 'undefined') {\r\n      // Method 3: text1, diffs\r\n      text1 = /** @type {string} */(a);\r\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\r\n    } else if (typeof a == 'string' && typeof opt_b == 'string' &&\r\n        opt_c && typeof opt_c == 'object') {\r\n      // Method 4: text1, text2, diffs\r\n      // text2 is not used.\r\n      text1 = /** @type {string} */(a);\r\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\r\n    } else {\r\n      throw new Error('Unknown call format to patch_make.');\r\n    }\r\n\r\n    if (diffs.length === 0) {\r\n      return [];  // Get rid of the null case.\r\n    }\r\n    const patches = [];\r\n    let patch = new patch_obj();\r\n    let patchDiffLength = 0;  // Keeping our own length const is faster in JS.\r\n    let char_count1 = 0;  // Number of characters into the text1 string.\r\n    let char_count2 = 0;  // Number of characters into the text2 string.\r\n    // Start with text1 (prepatch_text) and apply the diffs until we arrive at\r\n    // text2 (postpatch_text).  We recreate the patches one by one to determine\r\n    // context info.\r\n    let prepatch_text = text1;\r\n    let postpatch_text = text1;\r\n    for (let x = 0; x < diffs.length; x++) {\r\n      const diff_type = diffs[x][0];\r\n      const diff_text = diffs[x][1];\r\n\r\n      if (!patchDiffLength && diff_type !== DiffOp.Equal) {\r\n        // A new patch starts here.\r\n        patch.start1 = char_count1;\r\n        patch.start2 = char_count2;\r\n      }\r\n\r\n      switch (diff_type) {\r\n        case DiffOp.Insert:\r\n          patch.diffs[patchDiffLength++] = diffs[x];\r\n          patch.length2 += diff_text.length;\r\n          postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\r\n                          postpatch_text.substring(char_count2);\r\n          break;\r\n        case DiffOp.Delete:\r\n          patch.length1 += diff_text.length;\r\n          patch.diffs[patchDiffLength++] = diffs[x];\r\n          postpatch_text = postpatch_text.substring(0, char_count2) +\r\n                          postpatch_text.substring(char_count2 +\r\n                              diff_text.length);\r\n          break;\r\n        case DiffOp.Equal:\r\n          if (diff_text.length <= 2 * this.Patch_Margin &&\r\n              patchDiffLength && diffs.length != x + 1) {\r\n            // Small equality inside a patch.\r\n            patch.diffs[patchDiffLength++] = diffs[x];\r\n            patch.length1 += diff_text.length;\r\n            patch.length2 += diff_text.length;\r\n          } else if (diff_text.length >= 2 * this.Patch_Margin) {\r\n            // Time for a new patch.\r\n            if (patchDiffLength) {\r\n              this.patch_addContext_(patch, prepatch_text);\r\n              patches.push(patch);\r\n              patch = new patch_obj();\r\n              patchDiffLength = 0;\r\n              // Unlike Unidiff, our patch lists have a rolling context.\r\n              // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\r\n              // Update prepatch text & pos to reflect the application of the\r\n              // just completed patch.\r\n              prepatch_text = postpatch_text;\r\n              char_count1 = char_count2;\r\n            }\r\n          }\r\n          break;\r\n      }\r\n\r\n      // Update the current character count.\r\n      if (diff_type !== DiffOp.Insert) {\r\n        char_count1 += diff_text.length;\r\n      }\r\n      if (diff_type !== DiffOp.Delete) {\r\n        char_count2 += diff_text.length;\r\n      }\r\n    }\r\n    // Pick up the leftover patch if not empty.\r\n    if (patchDiffLength) {\r\n      this.patch_addContext_(patch, prepatch_text);\r\n      patches.push(patch);\r\n    }\r\n\r\n    return patches;\r\n  };\r\n\r\n\r\n  /**\r\n   * Given an array of patches, return another array that is identical.\r\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n   */\r\n    patch_deepCopy (patches: Array<patch_obj>): Array<patch_obj> {\r\n    // Making deep copies is hard in JavaScript.\r\n    const patchesCopy = [];\r\n    for (let x = 0; x < patches.length; x++) {\r\n      const patch = patches[x];\r\n      const patchCopy = new patch_obj();\r\n      patchCopy.diffs = [];\r\n      for (let y = 0; y < patch.diffs.length; y++) {\r\n        patchCopy.diffs[y] = [patch.diffs[y][0], patch.diffs[y][1]];\r\n      }\r\n      patchCopy.start1 = patch.start1;\r\n      patchCopy.start2 = patch.start2;\r\n      patchCopy.length1 = patch.length1;\r\n      patchCopy.length2 = patch.length2;\r\n      patchesCopy[x] = patchCopy;\r\n    }\r\n    return patchesCopy;\r\n  };\r\n\r\n\r\n  /**\r\n   * Merge a set of patches onto the text.  Return a patched text, as well\r\n   * as a list of true/false values indicating which patches were applied.\r\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n   * @param {string} text Old text.\r\n   * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\r\n   *      new text and an array of boolean values.\r\n   */\r\n    patch_apply (patches: Array<patch_obj>, text: string) {\r\n    if (patches.length == 0) {\r\n      return [text, []];\r\n    }\r\n\r\n    // Deep copy the patches so that no changes are made to originals.\r\n    patches = this.patch_deepCopy(patches);\r\n\r\n    const nullPadding = this.patch_addPadding(patches);\r\n    text = nullPadding + text + nullPadding;\r\n\r\n    this.patch_splitMax(patches);\r\n    // delta keeps track of the offset between the expected and actual location\r\n    // of the previous patch.  If there are patches expected at positions 10 and\r\n    // 20, but the first patch was found at 12, delta is 2 and the second patch\r\n    // has an effective expected position of 22.\r\n    let delta = 0;\r\n    const results = [];\r\n    for (let x = 0; x < patches.length; x++) {\r\n      const expected_loc = patches[x].start2 + delta;\r\n      const text1 = this.diff_text1(patches[x].diffs);\r\n      let start_loc;\r\n      let end_loc = -1;\r\n      if (text1.length > this.Match_MaxBits) {\r\n        // patch_splitMax will only provide an oversized pattern in the case of\r\n        // a monster delete.\r\n        start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\r\n                                    expected_loc);\r\n        if (start_loc != -1) {\r\n          end_loc = this.match_main(text,\r\n              text1.substring(text1.length - this.Match_MaxBits),\r\n              expected_loc + text1.length - this.Match_MaxBits);\r\n          if (end_loc == -1 || start_loc >= end_loc) {\r\n            // Can't find valid trailing context.  Drop this patch.\r\n            start_loc = -1;\r\n          }\r\n        }\r\n      } else {\r\n        start_loc = this.match_main(text, text1, expected_loc);\r\n      }\r\n      if (start_loc == -1) {\r\n        // No match found.  :(\r\n        results[x] = false;\r\n        // Subtract the delta for this failed patch from subsequent patches.\r\n        delta -= patches[x].length2 - patches[x].length1;\r\n      } else {\r\n        // Found a match.  :)\r\n        results[x] = true;\r\n        delta = start_loc - expected_loc;\r\n        let text2;\r\n        if (end_loc == -1) {\r\n          text2 = text.substring(start_loc, start_loc + text1.length);\r\n        } else {\r\n          text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\r\n        }\r\n        if (text1 == text2) {\r\n          // Perfect match, just shove the replacement text in.\r\n          text = text.substring(0, start_loc) +\r\n                this.diff_text2(patches[x].diffs) +\r\n                text.substring(start_loc + text1.length);\r\n        } else {\r\n          // Imperfect match.  Run a diff to get a framework of equivalent\r\n          // indices.\r\n          const diffs = this.diff_main(text1, text2, false);\r\n          if (text1.length > this.Match_MaxBits &&\r\n              this.diff_levenshtein(diffs) / text1.length >\r\n              this.Patch_DeleteThreshold) {\r\n            // The end points match, but the content is unacceptably bad.\r\n            results[x] = false;\r\n          } else {\r\n            this.diff_cleanupSemanticLossless(diffs);\r\n            let index1 = 0;\r\n            let index2;\r\n            for (let y = 0; y < patches[x].diffs.length; y++) {\r\n              const mod = patches[x].diffs[y];\r\n              if (mod[0] !== DiffOp.Equal) {\r\n                index2 = this.diff_xIndex(diffs, index1);\r\n              }\r\n              if (mod[0] === DiffOp.Insert) {  // Insertion\r\n                text = text.substring(0, start_loc + index2) + mod[1] +\r\n                      text.substring(start_loc + index2);\r\n              } else if (mod[0] === DiffOp.Delete) {  // Deletion\r\n                text = text.substring(0, start_loc + index2) +\r\n                      text.substring(start_loc + this.diff_xIndex(diffs,\r\n                          index1 + mod[1].length));\r\n              }\r\n              if (mod[0] !== DiffOp.Delete) {\r\n                index1 += mod[1].length;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Strip the padding off.\r\n    text = text.substring(nullPadding.length, text.length - nullPadding.length);\r\n    return [text, results];\r\n  };\r\n\r\n\r\n  /**\r\n   * Add some padding on text start and end so that edges can match something.\r\n   * Intended to be called only from within patch_apply.\r\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n   * @return {string} The padding string added to each side.\r\n   */\r\n    patch_addPadding (patches: Array<patch_obj>) {\r\n    const paddingLength = this.Patch_Margin;\r\n    let nullPadding = '';\r\n    for (let x = 1; x <= paddingLength; x++) {\r\n      nullPadding += String.fromCharCode(x);\r\n    }\r\n\r\n    // Bump all the patches forward.\r\n    for (let x = 0; x < patches.length; x++) {\r\n      patches[x].start1 += paddingLength;\r\n      patches[x].start2 += paddingLength;\r\n    }\r\n\r\n    // Add some padding on start of first diff.\r\n    let patch = patches[0];\r\n    let diffs = patch.diffs;\r\n    if (diffs.length == 0 || diffs[0][0] != DiffOp.Equal) {\r\n      // Add nullPadding equality.\r\n      diffs.unshift([DiffOp.Equal, nullPadding]);\r\n      patch.start1 -= paddingLength;  // Should be 0.\r\n      patch.start2 -= paddingLength;  // Should be 0.\r\n      patch.length1 += paddingLength;\r\n      patch.length2 += paddingLength;\r\n    } else if (paddingLength > diffs[0][1].length) {\r\n      // Grow first equality.\r\n      const extraLength = paddingLength - diffs[0][1].length;\r\n      diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\r\n      patch.start1 -= extraLength;\r\n      patch.start2 -= extraLength;\r\n      patch.length1 += extraLength;\r\n      patch.length2 += extraLength;\r\n    }\r\n\r\n    // Add some padding on end of last diff.\r\n    patch = patches[patches.length - 1];\r\n    diffs = patch.diffs;\r\n    if (diffs.length == 0 || diffs[diffs.length - 1][0] != DiffOp.Equal) {\r\n      // Add nullPadding equality.\r\n      diffs.push([DiffOp.Equal, nullPadding]);\r\n      patch.length1 += paddingLength;\r\n      patch.length2 += paddingLength;\r\n    } else if (paddingLength > diffs[diffs.length - 1][1].length) {\r\n      // Grow last equality.\r\n      const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\r\n      diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\r\n      patch.length1 += extraLength;\r\n      patch.length2 += extraLength;\r\n    }\r\n\r\n    return nullPadding;\r\n  };\r\n\r\n\r\n  /**\r\n   * Look through the patches and break up any which are longer than the maximum\r\n   * limit of the match algorithm.\r\n   * Intended to be called only from within patch_apply.\r\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n   */\r\n    patch_splitMax = function(patches: Array<patch_obj>) {\r\n    const patch_size = this.Match_MaxBits;\r\n    for (let x = 0; x < patches.length; x++) {\r\n      if (patches[x].length1 <= patch_size) {\r\n        continue;\r\n      }\r\n      const bigpatch = patches[x];\r\n      // Remove the big old patch.\r\n      patches.splice(x--, 1);\r\n      let start1 = bigpatch.start1;\r\n      let start2 = bigpatch.start2;\r\n      let precontext = '';\r\n      while (bigpatch.diffs.length !== 0) {\r\n        // Create one of several smaller patches.\r\n        const patch = new patch_obj();\r\n        let empty = true;\r\n        patch.start1 = start1 - precontext.length;\r\n        patch.start2 = start2 - precontext.length;\r\n        if (precontext !== '') {\r\n          patch.length1 = patch.length2 = precontext.length;\r\n          patch.diffs.push([DiffOp.Equal, precontext]);\r\n        }\r\n        while (bigpatch.diffs.length !== 0 &&\r\n              patch.length1 < patch_size - this.Patch_Margin) {\r\n          const diff_type = bigpatch.diffs[0][0];\r\n          let diff_text = bigpatch.diffs[0][1];\r\n          if (diff_type === DiffOp.Insert) {\r\n            // Insertions are harmless.\r\n            patch.length2 += diff_text.length;\r\n            start2 += diff_text.length;\r\n            patch.diffs.push(bigpatch.diffs.shift());\r\n            empty = false;\r\n          } else if (diff_type === DiffOp.Delete && patch.diffs.length == 1 &&\r\n                    patch.diffs[0][0] == DiffOp.Equal &&\r\n                    diff_text.length > 2 * patch_size) {\r\n            // This is a large deletion.  Let it pass in one chunk.\r\n            patch.length1 += diff_text.length;\r\n            start1 += diff_text.length;\r\n            empty = false;\r\n            patch.diffs.push([diff_type, diff_text]);\r\n            bigpatch.diffs.shift();\r\n          } else {\r\n            // Deletion or equality.  Only take as much as we can stomach.\r\n            diff_text = diff_text.substring(0,\r\n                patch_size - patch.length1 - this.Patch_Margin);\r\n            patch.length1 += diff_text.length;\r\n            start1 += diff_text.length;\r\n            if (diff_type === DiffOp.Equal) {\r\n              patch.length2 += diff_text.length;\r\n              start2 += diff_text.length;\r\n            } else {\r\n              empty = false;\r\n            }\r\n            patch.diffs.push([diff_type, diff_text]);\r\n            if (diff_text == bigpatch.diffs[0][1]) {\r\n              bigpatch.diffs.shift();\r\n            } else {\r\n              bigpatch.diffs[0][1] =\r\n                  bigpatch.diffs[0][1].substring(diff_text.length);\r\n            }\r\n          }\r\n        }\r\n        // Compute the head context for the next patch.\r\n        precontext = this.diff_text2(patch.diffs);\r\n        precontext =\r\n            precontext.substring(precontext.length - this.Patch_Margin);\r\n        // Append the end context for this patch.\r\n        const postcontext = this.diff_text1(bigpatch.diffs)\r\n                              .substring(0, this.Patch_Margin);\r\n        if (postcontext !== '') {\r\n          patch.length1 += postcontext.length;\r\n          patch.length2 += postcontext.length;\r\n          if (patch.diffs.length !== 0 &&\r\n              patch.diffs[patch.diffs.length - 1][0] === DiffOp.Equal) {\r\n            patch.diffs[patch.diffs.length - 1][1] += postcontext;\r\n          } else {\r\n            patch.diffs.push([DiffOp.Equal, postcontext]);\r\n          }\r\n        }\r\n        if (!empty) {\r\n          patches.splice(++x, 0, patch);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Take a list of patches and return a textual representation.\r\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n   * @return {string} Text representation of patches.\r\n   */\r\n    patch_toText (patches: Array<patch_obj>) {\r\n    const text = [];\r\n    for (let x = 0; x < patches.length; x++) {\r\n      text[x] = patches[x];\r\n    }\r\n    return text.join('');\r\n  };\r\n\r\n\r\n  /**\r\n   * Parse a textual representation of patches and return a list of Patch objects.\r\n   * @param {string} textline Text representation of patches.\r\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n   * @throws {!Error} If invalid input.\r\n   */\r\n    patch_fromText (textline: string): Array<patch_obj> {\r\n    const patches: Array<patch_obj> = [];\r\n    if (!textline) {\r\n      return patches;\r\n    }\r\n    const text = textline.split('\\n');\r\n    let textPointer = 0;\r\n    const patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\r\n    while (textPointer < text.length) {\r\n      const m = text[textPointer].match(patchHeader);\r\n      if (!m) {\r\n        throw new Error('Invalid patch string: ' + text[textPointer]);\r\n      }\r\n      const patch = new patch_obj();\r\n      patches.push(patch);\r\n      patch.start1 = parseInt(m[1], 10);\r\n      if (m[2] === '') {\r\n        patch.start1--;\r\n        patch.length1 = 1;\r\n      } else if (m[2] == '0') {\r\n        patch.length1 = 0;\r\n      } else {\r\n        patch.start1--;\r\n        patch.length1 = parseInt(m[2], 10);\r\n      }\r\n\r\n      patch.start2 = parseInt(m[3], 10);\r\n      if (m[4] === '') {\r\n        patch.start2--;\r\n        patch.length2 = 1;\r\n      } else if (m[4] == '0') {\r\n        patch.length2 = 0;\r\n      } else {\r\n        patch.start2--;\r\n        patch.length2 = parseInt(m[4], 10);\r\n      }\r\n      textPointer++;\r\n\r\n      while (textPointer < text.length) {\r\n        const sign = text[textPointer].charAt(0);\r\n        let line: string;\r\n        try {\r\n          line = decodeURI(text[textPointer].substring(1));\r\n        } catch (ex) {\r\n          // Malformed URI sequence.\r\n          throw new Error('Illegal escape in patch_fromText: ' + line);\r\n        }\r\n        if (sign == '-') {\r\n          // Deletion.\r\n          patch.diffs.push([DiffOp.Delete, line]);\r\n        } else if (sign == '+') {\r\n          // Insertion.\r\n          patch.diffs.push([DiffOp.Insert, line]);\r\n        } else if (sign == ' ') {\r\n          // Minor equality.\r\n          patch.diffs.push([DiffOp.Equal, line]);\r\n        } else if (sign == '@') {\r\n          // Start of next patch.\r\n          break;\r\n        } else if (sign === '') {\r\n          // Blank line?  Whatever.\r\n        } else {\r\n          // WTF?\r\n          throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\r\n        }\r\n        textPointer++;\r\n      }\r\n    }\r\n    return patches;\r\n  };\r\n\r\n}\r\n\r\n\r\n/**\r\n * Class representing one patch operation.\r\n * @constructor\r\n */\r\nexport class patch_obj {\r\n\r\n  constructor() {  }\r\n\r\n  diffs: Array<Diff> = [];\r\n  start1: number = null;\r\n  start2: number = null;\r\n  length1: number = 0;\r\n  length2: number = 0;\r\n\r\n  /**\r\n   * Emmulate GNU diff's format.\r\n   * Header: @@ -382,8 +481,9 @@\r\n   * Indicies are printed as 1-based, not 0-based.\r\n   */\r\n  toString = function() {\r\n    let coords1, coords2;\r\n    if (this.length1 === 0) {\r\n      coords1 = this.start1 + ',0';\r\n    } else if (this.length1 == 1) {\r\n      coords1 = this.start1 + 1;\r\n    } else {\r\n      coords1 = (this.start1 + 1) + ',' + this.length1;\r\n    }\r\n    if (this.length2 === 0) {\r\n      coords2 = this.start2 + ',0';\r\n    } else if (this.length2 == 1) {\r\n      coords2 = this.start2 + 1;\r\n    } else {\r\n      coords2 = (this.start2 + 1) + ',' + this.length2;\r\n    }\r\n    const text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\r\n    let op;\r\n    // Escape the body of the patch with %xx notation.\r\n    for (let x = 0; x < this.diffs.length; x++) {\r\n      switch (this.diffs[x][0]) {\r\n        case DiffOp.Insert:\r\n          op = '+';\r\n          break;\r\n        case DiffOp.Delete:\r\n          op = '-';\r\n          break;\r\n        case DiffOp.Equal:\r\n          op = ' ';\r\n          break;\r\n      }\r\n      text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\r\n    }\r\n    return text.join('').replace(/%20/g, ' ');\r\n  }\r\n}\r\n\r\nexport { DiffMatchPatch };\r\n"]}