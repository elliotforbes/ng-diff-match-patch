{"version":3,"file":"lineCompare.component.js","sourceRoot":"","sources":["../src/lineCompare.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit, OnChanges } from '@angular/core';\r\nimport { Diff, DiffOp } from './diffMatchPatch';\r\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\r\n\r\n/* Holds the state of the calculation of the diff result we intend to display.\r\n *  > lines contains the data that will be displayed on screen.\r\n *  > lineLeft keeps track of the document line number in the [left] input.\r\n *  > lineRight keeps track of the document line number in the [right] input.\r\n */\r\ntype DiffCalculation = {\r\n  lines: Array<[string, string, string, string]>,\r\n  lineLeft: number,\r\n  lineRight: number\r\n};\r\n\r\n@Component({\r\n  selector: 'dmp-line-compare',\r\n  styles: [`\r\n    div.dmp-line-compare {\r\n      display: flex;\r\n      flex-direction: row;\r\n      border: 1px solid #808080;\r\n      font-family: Consolas, Courier, monospace;\r\n      width: 911px;\r\n    }\r\n    div.dmp-line-compare-margin {\r\n      width: 101px;\r\n    }\r\n    div.dmp-line-compare-content {\r\n      position: relative;\r\n      top: 0px;\r\n      left: 0px;\r\n      flex-grow: 1;\r\n      overflow-x: scroll;\r\n    }\r\n    div.dmp-line-compare-content-wrapper {\r\n      position: absolute;\r\n      top: 0px;\r\n      left: 0px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: stretch;\r\n    }\r\n    div.dmp-line-compare-left {\r\n      width: 50px;\r\n      text-align: center;\r\n      color: #484848;\r\n    }\r\n    div.dmp-line-compare-equal>div.dmp-line-compare-left,\r\n      div.dmp-line-compare-equal>div.dmp-line-compare-right {\r\n      background-color: #dedede;\r\n    }\r\n    div.dmp-line-compare-insert>div.dmp-line-compare-left,\r\n      div.dmp-line-compare-insert>div.dmp-line-compare-right {\r\n      background-color: #8bfb6f;\r\n    }\r\n    div.dmp-line-compare-delete>div.dmp-line-compare-left,\r\n      div.dmp-line-compare-delete>div.dmp-line-compare-right {\r\n      background-color: #f56868;\r\n    }\r\n    div.dmp-line-compare-right {\r\n      width: 50px;\r\n      text-align: center;\r\n      color: #484848;\r\n      border-right: 1px solid #888888;\r\n    }\r\n    div.dmp-line-compare-text {\r\n      white-space: pre;\r\n      padding-left: 10px;\r\n      min-width: 800px;\r\n    }\r\n    .dmp-line-compare-delete {\r\n      background-color: #ff8c8c;\r\n    }\r\n    .dmp-line-compare-insert {\r\n      background-color: #9dff97;\r\n    }\r\n    .dmp-line-compare-delete>div {\r\n      display: inline-block;\r\n    }  \r\n    .dmp-line-compare-insert>div {\r\n      display: inline-block;\r\n    }\r\n    .dmp-line-compare-equal>div {\r\n      display: inline-block;\r\n    }\r\n    .dmp-margin-bottom-spacer {\r\n      height: 20px;\r\n      background-color: #dedede;\r\n      border-right: 1px solid #888888;\r\n    }\r\n  `],\r\n  template: `\r\n    <div class=\"dmp-line-compare-no-changes-text\" *ngIf=\"isContentEqual\">\r\n      There are no changes to display.\r\n    </div>    \r\n    <div class=\"dmp-line-compare\" *ngIf=\"!isContentEqual\">\r\n      <div class=\"dmp-line-compare-margin\">\r\n        <div [ngClass]=\"lineDiff[0]\" *ngFor=\"let lineDiff of calculatedDiff\">\r\n          <div class=\"dmp-line-compare-left\">{{lineDiff[1]}}</div><!-- No space\r\n        --><div class=\"dmp-line-compare-right\">{{lineDiff[2]}}</div>\r\n        </div>\r\n        <div class=\"dmp-margin-bottom-spacer\"></div>\r\n      </div><!-- No space\r\n   --><div class=\"dmp-line-compare-content\">\r\n        <div class=\"dmp-line-compare-content-wrapper\">\r\n          <div [ngClass]=\"lineDiff[0]\" *ngFor=\"let lineDiff of calculatedDiff\">\r\n            <div class=\"dmp-line-compare-text\">{{lineDiff[3]}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class LineCompareComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  public left: string | number | boolean;\r\n  @Input()\r\n  public right: string | number | boolean;\r\n  // The number of lines of context to provide either side of a DiffOp.Insert or DiffOp.Delete diff.\r\n  // Context is taken from a DiffOp.Equal section.\r\n  @Input()\r\n  public lineContextSize: number;\r\n\r\n  public calculatedDiff: Array<[string, string, string]>;\r\n  public isContentEqual: boolean;\r\n\r\n  public constructor(\r\n      private dmp: DiffMatchPatchService) {}\r\n\r\n  public ngOnInit(): void {\r\n    this.updateHtml();\r\n  }\r\n\r\n  public ngOnChanges(): void {\r\n    this.updateHtml();\r\n  }\r\n\r\n  private updateHtml(): void {\r\n    if (typeof this.left === 'number' || typeof this.left === 'boolean') {\r\n      this.left = this.left.toString();\r\n    }\r\n    if (typeof this.right === 'number' || typeof this.right === 'boolean') {\r\n      this.right = this.right.toString();\r\n    }\r\n    this.calculateLineDiff(this.dmp.getLineDiff(this.left, this.right));\r\n  }\r\n\r\n  private calculateLineDiff(diffs: Array<Diff>): void {\r\n    const diffCalculation: DiffCalculation = {\r\n      lines: [],\r\n      lineLeft: 1,\r\n      lineRight: 1\r\n    };\r\n\r\n    this.isContentEqual = diffs.length === 1 && diffs[0][0] === DiffOp.Equal;\r\n    if (this.isContentEqual) {\r\n      this.calculatedDiff = [];\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < diffs.length; i++) {\r\n      const diff = diffs[i];\r\n      let diffLines: string[] = diff[1].split(/\\r?\\n/);\r\n\r\n      // If the original line had a \\r\\n at the end then remove the\r\n      // empty string after it.\r\n      if (diffLines[diffLines.length - 1].length == 0) {\r\n        diffLines.pop();\r\n      }\r\n\r\n      switch (diff[0]) {\r\n        case DiffOp.Equal: {\r\n          const isFirstDiff = i === 0;\r\n          const isLastDiff = i === diffs.length - 1;\r\n          this.outputEqualDiff(diffLines, diffCalculation, isFirstDiff, isLastDiff);\r\n          break;\r\n        }\r\n        case DiffOp.Delete: {\r\n          this.outputDeleteDiff(diffLines, diffCalculation);\r\n          break;\r\n        }\r\n        case DiffOp.Insert: {\r\n          this.outputInsertDiff(diffLines, diffCalculation);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.calculatedDiff = diffCalculation.lines;\r\n  }\r\n\r\n  /* If the number of diffLines is greater than lineContextSize then we may need to adjust the diff\r\n   * that is output.\r\n   *   > If the first diff of a document is DiffOp.Equal then the leading lines can be dropped\r\n   *     leaving the last 'lineContextSize' lines for context.\r\n   *   > If the last diff of a document is DiffOp.Equal then the trailing lines can be dropped\r\n   *     leaving the first 'lineContextSize' lines for context.\r\n   *   > If the diff is a DiffOp.Equal occurs in the middle then the diffs either side of it must be\r\n   *     DiffOp.Insert or DiffOp.Delete. If it has more than 2 * 'lineContextSize' lines of content\r\n   *     then the middle lines are dropped leaving the first 'lineContextSize' and last 'lineContextSize'\r\n   *     lines for context. A special line is inserted with '...' indicating that content is skipped.\r\n   *\r\n   * A document cannot consist of a single Diff with DiffOp.Equal and reach this function because\r\n   * in this case the calculateLineDiff method returns early.\r\n   */\r\n  private outputEqualDiff(\r\n      diffLines: string[],\r\n      diffCalculation: DiffCalculation,\r\n      isFirstDiff: boolean,\r\n      isLastDiff: boolean): void {\r\n    if (this.lineContextSize && diffLines.length > this.lineContextSize) {\r\n      if (isFirstDiff) {\r\n        // Take the last 'lineContextSize' lines from the first diff\r\n        const lineIncrement = diffLines.length - this.lineContextSize;\r\n        diffCalculation.lineLeft += lineIncrement;\r\n        diffCalculation.lineRight += lineIncrement;\r\n        diffLines = diffLines.slice(diffLines.length - this.lineContextSize, diffLines.length);\r\n      }\r\n      else if (isLastDiff) {\r\n        // Take only the first 'lineContextSize' lines from the final diff\r\n        diffLines = diffLines.slice(0, this.lineContextSize);\r\n      }\r\n      else if (diffLines.length > 2 * this.lineContextSize) {\r\n        // Take the first 'lineContextSize' lines from this diff to provide context for the last diff\r\n        this.outputEqualDiffLines(diffLines.slice(0, this.lineContextSize), diffCalculation);\r\n\r\n        // Output a special line indicating that some content is equal and has been skipped\r\n        diffCalculation.lines.push(['dmp-line-compare-equal', '...', '...', '...']);\r\n        const numberOfSkippedLines = diffLines.length - (2 * this.lineContextSize);\r\n        diffCalculation.lineLeft += numberOfSkippedLines;\r\n        diffCalculation.lineRight += numberOfSkippedLines;\r\n\r\n        // Take the last 'lineContextSize' lines from this diff to provide context for the next diff\r\n        this.outputEqualDiffLines(diffLines.slice(diffLines.length - this.lineContextSize), diffCalculation);\r\n        // This if branch has already output the diff lines so we return early to avoid outputting the lines\r\n        // at the end of the method.\r\n        return;\r\n      }\r\n    }\r\n    this.outputEqualDiffLines(diffLines, diffCalculation);\r\n  }\r\n\r\n  private outputEqualDiffLines(\r\n      diffLines: string[],\r\n      diffCalculation: DiffCalculation): void {\r\n    for (const line of diffLines) {\r\n      diffCalculation.lines.push(['dmp-line-compare-equal', `${diffCalculation.lineLeft}`, `${diffCalculation.lineRight}`, line]);\r\n      diffCalculation.lineLeft++;\r\n      diffCalculation.lineRight++;\r\n    }\r\n  }\r\n\r\n  private outputDeleteDiff(\r\n      diffLines: string[],\r\n      diffCalculation: DiffCalculation): void {\r\n    for (const line of diffLines) {\r\n      diffCalculation.lines.push(['dmp-line-compare-delete', `${diffCalculation.lineLeft}`, '-', line]);\r\n      diffCalculation.lineLeft++;\r\n    }\r\n  }\r\n\r\n  private outputInsertDiff(\r\n      diffLines: string[],\r\n      diffCalculation: DiffCalculation): void {\r\n    for (const line of diffLines) {\r\n      diffCalculation.lines.push(['dmp-line-compare-insert', '-', `${diffCalculation.lineRight}`, line]);\r\n      diffCalculation.lineRight++;\r\n    }\r\n  }\r\n}\r\n"]}